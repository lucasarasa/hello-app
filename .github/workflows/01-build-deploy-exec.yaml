name: Build, Push e Deploy com Versão Automática

on:
  push:
    paths:
      - 'main.py'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Definir versão (v<numero de commits>) baseado na mudança do main.py
        run: |
          VERSION="v$(git log --pretty=oneline -- main.py | wc -l)"
          echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV
          echo "Versão da imagem gerada (main.py): $VERSION"

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build da imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/hello-app:${{ env.IMAGE_TAG }} .

      - name: Push da imagem para o Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/hello-app:${{ env.IMAGE_TAG }}

      - name: Clonar repo de manifests via SSH
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.MANIFEST_REPO }}
          path: manifests
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Atualizar arquivo de deployment com nova imagem
        run: |
          sed -i "s|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/hello-app:${{ env.IMAGE_TAG }}|" manifests/deployment.yaml
          echo "Arquivo de deployment atualizado com a nova imagem."

      - name: Commit e push das mudanças no repo de manifests
        run: |
          cd manifests
          git config user.name "GitHub-Actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add deployment.yaml
          git commit -m "Atualizando deployment para nova imagem ${IMAGE_TAG}"
          git push origin main